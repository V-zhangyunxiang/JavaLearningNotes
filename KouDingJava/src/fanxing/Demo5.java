<<<<<<< HEAD
package fanxing;

public class Demo5 {
	/* JDK1.6才出现的泛型
	 * 泛型:通过<数据类型>接收一种(引用数据类型)，在编译程序时会使用该类型检查集合中储存的对象是否是该类型的
	 * 如果不是，编译不通过，从而把运行时期的问题转移到编译时期，提高了程序的安全性.
	 * 使用泛型不需要强制类型转换.
	        适用范围:类泛型，方法泛型，接口泛型
	        方法泛型:有两种，一种是与类泛型保持一致，一种是自由的，自己定义泛型           
	 * 泛型擦除:泛型是存在编译时期的，编译成class文件后就不存在了
	 * 通配符:？
	 * 泛型限定:? extends E  泛型上限      该类或该类的子类
	 *        ? super E  泛型下限      该类会该类的父类
	 * 
	 */
	
	

}
=======
package fanxing;

public class Demo5 {
	/* JDK1.6才出现的泛型
	 * 泛型:通过<数据类型>接收一种(引用数据类型)，在编译程序时会使用该类型检查集合中储存的对象是否是该类型的
	 * 如果不是，编译不通过，从而把运行时期的问题转移到编译时期，提高了程序的安全性.
	 * 使用泛型不需要强制类型转换.
	        适用范围:类泛型，方法泛型，接口泛型
	        方法泛型:有两种，一种是与类泛型保持一致，一种是自由的，自己定义泛型           
	 * 泛型擦除:泛型是存在编译时期的，编译成class文件后就不存在了
	 * 通配符:？
	 * 泛型限定:? extends E  泛型上限      该类或该类的子类
	 *        ? super E  泛型下限      该类会该类的父类
	 * 
	 */
	
	

}
>>>>>>> eb701f607e65845085d7f732a560446847aae8f6
